# Settings for the Poleposition database benchmark 
# with short test runs for debugging only
# Results are not signifant


# Global settings for all circuits

concurrency=false
threads=1,3,10


# complex
#
# [objects]: number of objects to select from
# [selects]: number of queries run against all objects
complex.objects=1,2,3
complex.depth=4,4,4
complex.selects=50,50,50

# nestedlists
#
# [reuse]: number of objects to reuse 
# [objects]: number of objects to store as leafs
# [updates]: number of updates and deletes to be run
# [depth]: depth of the tree
nestedlists.objects=5,5,5
nestedlists.reuse=1,2,3
nestedlists.depth=4,4,4


# inheritancehierarchy
#
# [objects]: number of objects to select from
# [selects]: number of queries run against all objects

inheritancehierarchy.objects=100,300,1000
inheritancehierarchy.selects=10,10,10


# flatobject
#
# [objects]: number of objects to store
# [selects]: number of queries to be run against all objects
# [updates]: number of updates and deletes to be run
# [commitinterval]: when to perform an intermediate commit during write and delete

flatobject.objects=300,1000,3000
flatobject.selects=10,10,10
flatobject.updates=10,10,10
flatobject.commitinterval=100,100,100



# commits
#
# [objects]: number of objects in the database
# [commits]: number of added objects and commits

commits.objects=100,300,1000
commits.commits=30,30,30


# strings
#
# [objects]: number of objects to be written, read and deleted
# [commitintervall]: when to perform an intermediate commit during write and delete

strings.objects=30,100,300
strings.commitinterval=10,10,10


# arraylists
#
# [size]: number of elements per list

arraylists.size=5,10,20


# querycaching
#
# [objects]: number of objects to store
# [selects]: number of query runs, executing the same query

querycaching.objects=1000,3000,10000
querycaching.selects=10,10,10,10


# trees
#
# [treedepth]: depth of the tree
#

trees.depth=2,3,4


# nativeids
#
# [objects]: number of objects to select from
# [selects]: number of queries run against all objects
# [commitinterval]: when to perform an intermediate commit during write and delete

nativeids.objects=1000,3000,10000
nativeids.selects=500,500,500
nativeids.commitinterval=1000,1000,1000



# complexconcurrency

complexconcurrency.threads=1,3,10
complexconcurrency.time=10000,10000,10000
complexconcurrency.objects=3,3,3
complexconcurrency.depth=4,4,4
complexconcurrency.writes=3,3,3
complexconcurrency.selects=20,20,20
complexconcurrency.updates=2,2,2
complexconcurrency.deletes=2,2,2


# querycentricconcurrency

querycentricconcurrency.threads=1,3,10
querycentricconcurrency.time=10000,10000,10000
querycentricconcurrency.objects=3,3,3
querycentricconcurrency.depth=4,4,4
querycentricconcurrency.writes=2,2,2
querycentricconcurrency.selects=100,100,100
querycentricconcurrency.updates=1,1,1
querycentricconcurrency.deletes=1,1,1


