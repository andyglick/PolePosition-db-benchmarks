# Settings for all circuits in the Poleposition database benchmark.


monitoring=false

# Global settings for all circuits

concurrency=false
threads=1, 3,10

#configurationname=Client/Server
#configurationname=Embedded



# complex
#
# [objects]: number of objects to select from
# [selects]: number of queries run against all objects
complex.objects=5,6,7
complex.depth=6,6,6
complex.selects=500,500,500


# nestedlists
#
# [objects]: number of objects to store as leafs
# [reuse]: number of objects to reuse from the total objects 
# [depth]: depth of the tree
nestedlists.objects=50,50,50
nestedlists.reuse=30,15,1
nestedlists.depth=4,4,4


# inheritancehierarchy
#
# [objects]: number of objects to select from
# [selects]: number of queries run against all objects

inheritancehierarchy.objects=3000,10000,30000
inheritancehierarchy.selects=100,100,100



# flatobject
#
# [objects]: number of objects to store
# [selects]: number of queries to be run against all objects
# [updates]: number of updates and deletes to be run
# [commitinterval]: when to perform an intermediate commit during write and delete
flatobject.objects=30000,100000,300000
flatobject.selects=3000,3000,3000
flatobject.updates=3000,3000,3000
flatobject.commitinterval=10000,10000,10000


# commits
#
# [objects]: number of objects in the database
# [commits]: number of added objects and commits

commits.objects=100000,300000,1000000
commits.commits=30,30,30


# strings
#
# [objects]: number of objects to be written, read and deleted
# [commitintervall]: when to perform an intermediate commit during write and delete

strings.objects=10000,30000,100000
strings.commitinterval=1000,1000,1000


# arraylists
#
# [size]: number of elements per list

arraylists.size=30,100,300


# querycaching
#
# [objects]: number of objects to store
# [selects]: number of query runs, executing the same query

querycaching.objects=10000,30000,100000
querycaching.selects=1000,1000,1000



# trees
#
# [depth]: depth of the tree

trees.depth=10,12,14


# nativeids
#
# [objects]: number of objects to select from
# [selects]: number of queries run against all objects
# [commitinterval]: when to perform an intermediate commit during write and delete

nativeids.objects=30000,100000,300000
nativeids.selects=5000,5000,5000
nativeids.commitinterval=1000,1000,1000



# complexconcurrency

complexconcurrency.threads=1,3,10
complexconcurrency.time=60000,60000,60000
complexconcurrency.writes=3,3,3
complexconcurrency.selects=20,20,20
complexconcurrency.updates=2,2,2
complexconcurrency.deletes=2,2,2
complexconcurrency.objects=3,3,3
complexconcurrency.depth=4,4,4


# querycentricconcurrency

querycentricconcurrency.threads=1,3,10
querycentricconcurrency.time=60000,60000,60000
querycentricconcurrency.selects=300,300,300
querycentricconcurrency.writes=2,2,2
querycentricconcurrency.updates=1,1,1
querycentricconcurrency.deletes=1,1,1
querycentricconcurrency.objects=3,3,3
querycentricconcurrency.depth=4,4,4


# insertcentricconcurrency

insertcentricconcurrency.threads=1,3,10
insertcentricconcurrency.time=60000,60000,60000
insertcentricconcurrency.writes=10,10,10
insertcentricconcurrency.selects=10,10,10
insertcentricconcurrency.updates=1,1,1
insertcentricconcurrency.deletes=1,1,1
insertcentricconcurrency.objects=3,3,3
insertcentricconcurrency.depth=4,4,4
